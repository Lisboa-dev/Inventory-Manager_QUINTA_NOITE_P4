//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// base.prisma
//

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//
// model.prisma
//

model Genero {
  id   Int    @id @default(autoincrement())
  nome String

  usuario   User @relation("GenerosToUser", fields: [usuarioId], references: [id])
  usuarioId Int

  nodeId   Int?
  node     Genero?  @relation("GeneroToGenero", fields: [nodeId], references: [id])
  children Genero[] @relation("GeneroToGenero")

  lotes Lote[] @relation("LotesToGenre")

  createdAt DateTime @default(now())
}

//
// model.prisma
//

model Lote {
  id           Int       @id @default(autoincrement())
  codigo       String
  quantidade   Int
  dataValidade DateTime
  produtoId    Int
  produto      Produto   @relation(fields: [produtoId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}


//
// model.prisma
//

model Produto {
  id                Int      @id @default(autoincrement())
  nome              String
  descricao         String? 
  preco             Decimal   @db.Decimal(10, 2)
  quantidadeEstoque Int       @default(0)
  lotes             Lote[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

//
// model.prisma
//

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  senha String

  generos   Genero[]  @relation("GenerosToUser")
  produtos  Produto[] @relation("ProdutosToUser")
  lotes     Lote[]    @relation("LotesToUser")
  createdAt DateTime  @default(now())
}
